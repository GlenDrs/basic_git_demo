

    git config –global user.name “[name]” ->sets author name
    git config –global user.email “[email address]” ->sets author email id

    git init [repository name] ->start new repository

    git clone [url] ->obtain a repository from an existing URL.

    git add [file] ->adds a file to the staging area.

    git add --patch * // Or,
    git add -p --> Le flag —patch lance un programme interactif qui vous permet d’ajouter en staging ou pas certains bouts de code. Vous aurez plusieurs options comme split 
                   pour diviser encore plus le code en morceaux. --patch est parfait si vous avec fait plusieurs modifications dans un fichier mais que vous ne voulez commit 
                   qu’une modification dans ce meme fichier.

    git commit -m “[ Type in the commit message]” ->records or snapshots the file permanently in the version history.
    git commit -a ->commits any files you’ve changed since then.&commits any files you’ve added

    git diff ->shows the file differences which are not yet staged.
    git diff –staged ->differences between the files in the staging area and the latest version present.
    git diff [first branch] [second branch] ->differences between the two branches mentioned.

    git reset [file] ->unstages the file, but it preserves the file contents.
    git reset [commit] ->undoes all the commits after the specified commit and preserves the changes locally.
    git reset –hard [commit] ->discards all history and goes back to the specified commit.

    git status ->command lists all the files that have to be committed.

9 ) git rm [file] ->deletes the file from your working directory and stages the deletion.

    git log ->used to list the version history for the current branch.
    git log –follow[file] ->lists version history for a file, including the renaming of files also.

    git show [commit] ->shows the metadata and content changes of the specified commit.

    git tag [commitID] ->used to give tags to the specified commit.

    git branch ->lists all the local branches in the current repository.
    git branch [branch name] -> creates a new branch.
    git branch -d [branch name] -> deletes the feature branch.

    git checkout [branch name] -> used to switch from one branch to another
    git checkout -b [branch name] ->creates a new branch and also switches to it.
    git checkout -- [file]-> If you have not already commited and want to go back
    git checkout --. -> same thing like 'checkout -- [file]' but it do all the files.
                // ATENTION: if you've already git add -p, you must use before:
                // the previeous command:  git restore --staged [file]

    git merge [branch name] ->merges the specified branch’s history into the current branch.

    git remote add [variable name] [Remote Server Link] ->used to connect your local repository to the remote server.

    git revert [commit id] -> it will bring back your work at the state before the commit with the number id you've reverted.
                         // after that if you tipe git log at the last commit it will add the 'Revert' in the begining.
    git revert -n [commit id] -> The change has been made but not the commit.

    git reset --hard [commit id]-> you can reverse the 'come back' that you did with 'git revert'

    git push [variable name] master ->sends the committed changes of master branch to your remote repository.
    git push [variable name] [branch] ->sends the branch commits to your remote repository.
    git push –all [variable name] ->pushes all branches to your remote repository.
    git push [variable name] :[branch name] ->deletes a branch on your remote repository.

    git pull [Repository Link] ->fetches and merges changes on the remote server to your working directory.
    git pull --rebase origin [name of the branch were we have the new file and the new local commit] -> see file 'case_we_add_comit_in_github'

    git stash save ->stores all the modified tracked files.

    git stash pop ->restores the most recently stashed files.
    git stash list ->lists all stashed changesets.
    git stash drop ->discards the most recently stashed changeset.
